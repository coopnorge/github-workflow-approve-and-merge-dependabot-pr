---
name: Approve and merge Dependabot PR
on:
  workflow_call:
    inputs:
      merge-strategy:
        type: string
        required: false
        default: squash and merge
        description: |
          Strategy type to use when Dependabot merges the PR.
          Check https://docs.github.com/en/code-security/dependabot/working-with-dependabot/managing-pull-requests-for-dependency-updates#managing-dependabot-pull-requests-with-comment-commands
      docker:
        type: boolean
        required: false
        default: true
        description: |
          If enabled, the workflow approves and merge engineering devtools images updates
      python:
        type: boolean
        required: false
        default: true
        description: |
          If enabled, the workflow approves and merges patch Python updates
      golang:
        type: boolean
        required: false
        default: true
        description: |
          If enabled, the workflow approves and merges patch for go modules
      npm-and-yarn:
        type: boolean
        required: false
        default: true
        description: |
          If enabled, the workflow approves and merges patch for npm and yarn ecosystem
      github-actions:
        type: boolean
        required: false
        default: true
        description: |
          If enabled, the workflow approves and merges patch for GitHub Actions
      nuget:
        type: boolean
        required: false
        default: true
        description: |
          If enabled, the workflow approves and merges minor and patch for nuget     
    secrets:
      reviewbot-github-token:
        required: true
        description: |
          GitHub token with permission to approve the PR (usually secrets.REVIEWBOT_GITHUB_TOKEN )

jobs:
  dependabot-fetch-metadata:
    name: Fetch metadata of Dependabot update
    runs-on: "ubuntu-latest"
    if: ${{ github.actor == 'dependabot[bot]' }}
    outputs:
      package-ecosystem: ${{ steps.dependabot-metadata.outputs.package-ecosystem }}
      dependency-names: ${{ steps.dependabot-metadata.outputs.dependency-names }}
      update-type: ${{ steps.dependabot-metadata.outputs.update-type }}
      dependency-type: ${{ steps.dependabot-metadata.outputs.dependency-type }}
    steps:
      - id: dependabot-metadata
        uses: dependabot/fetch-metadata@v2.0.0

  docker:
    runs-on: "ubuntu-latest"
    needs:
      - dependabot-fetch-metadata
    outputs:
      approve: ${{ steps.set-output.outputs.APPROVE }}
    steps:
      - id: set-output
        run: echo "APPROVE=true" >> $GITHUB_OUTPUT
        if: |
          inputs.docker == true &&
          needs.dependabot-fetch-metadata.outputs.package-ecosystem == 'docker' &&
          startsWith(needs.dependabot-fetch-metadata.outputs.dependency-names, 'coopnorge/engineering-docker-images/e0')

  python:
    runs-on: "ubuntu-latest"
    needs:
      - dependabot-fetch-metadata
    outputs:
      approve: ${{ steps.set-output.outputs.APPROVE }}
    steps:
      - id: set-output
        run: echo "APPROVE=true" >> $GITHUB_OUTPUT
        if: |
          inputs.python == true &&
          needs.dependabot-fetch-metadata.outputs.package-ecosystem == 'pip' &&
          (
            (
              needs.dependabot-fetch-metadata.outputs.dependency-type == 'direct:production' &&
              (
                needs.dependabot-fetch-metadata.outputs.update-type == 'version-update:semver-patch' ||
                needs.dependabot-fetch-metadata.outputs.update-type == 'version-update:semver-minor'
              )
            ) ||
            needs.dependabot-fetch-metadata.outputs.dependency-type == 'direct:development'
          )

  golang:
    runs-on: "ubuntu-latest"
    outputs:
      approve: ${{ steps.set-output.outputs.APPROVE }}
    needs:
      - dependabot-fetch-metadata
    steps:
      - id: set-output
        run: echo "APPROVE=true" >> $GITHUB_OUTPUT
        if: |
          inputs.golang == true &&
          (
            needs.dependabot-fetch-metadata.outputs.package-ecosystem == 'gomod' ||
            needs.dependabot-fetch-metadata.outputs.package-ecosystem == 'go_modules'
          ) &&
          needs.dependabot-fetch-metadata.outputs.update-type == 'version-update:semver-patch'

  npm-and-yarn:
    runs-on: "ubuntu-latest"
    outputs:
      approve: ${{ steps.set-output.outputs.APPROVE }}
    needs:
      - dependabot-fetch-metadata
    steps:
      - id: set-output
        run: echo "APPROVE=true" >> $GITHUB_OUTPUT
        if: |
          inputs.npm-and-yarn == true &&
          needs.dependabot-fetch-metadata.outputs.package-ecosystem == 'npm_and_yarn' &&
          needs.dependabot-fetch-metadata.outputs.update-type == 'version-update:semver-patch'

  github-actions:
    runs-on: "ubuntu-latest"
    outputs:
      approve: ${{ steps.set-output.outputs.APPROVE }}
    needs:
      - dependabot-fetch-metadata
    steps:
      - id: set-output
        run: echo "APPROVE=true" >> $GITHUB_OUTPUT
        if: |
          inputs.github-actions == true &&
          needs.dependabot-fetch-metadata.outputs.package-ecosystem == 'github_actions' &&
          (
            needs.dependabot-fetch-metadata.outputs.update-type == 'version-update:semver-patch' ||
            needs.dependabot-fetch-metadata.outputs.update-type == 'version-update:semver-minor'
          )

  nuget:
    runs-on: "ubuntu-latest"
    outputs:
      approve: ${{ steps.set-output.outputs.APPROVE }}
    needs:
      - dependabot-fetch-metadata
    steps:
      - id: set-output
        run: echo "APPROVE=true" >> $GITHUB_OUTPUT
        if: |
          inputs.nuget == true &&
          needs.dependabot-fetch-metadata.outputs.package-ecosystem == 'nuget' &&
          (
            needs.dependabot-fetch-metadata.outputs.update-type == 'version-update:semver-patch' ||
            needs.dependabot-fetch-metadata.outputs.update-type == 'version-update:semver-minor'
          )

  approve-pr:
    runs-on: "ubuntu-latest"
    needs:
      - docker
      - python
      - golang
      - npm-and-yarn
      - github-actions
      - nuget
    env:
      GH_TOKEN: ${{ secrets.reviewbot-github-token }}
    steps:
      - run: |
          gh pr review --approve --body "@dependabot ${{ inputs.merge-strategy }}" --repo ${{ github.repository }} ${{ github.event.number }}
        if: |
          needs.docker.outputs.approve == 'true' ||
          needs.python.outputs.approve == 'true' ||
          needs.golang.outputs.approve == 'true' ||
          needs.npm-and-yarn.outputs.approve == 'true' ||
          needs.github-actions.outputs.approve == 'true' ||
          needs.nuget.outputs.approve == 'true'
